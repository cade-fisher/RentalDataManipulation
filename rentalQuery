-- Drop tables if they exist
DROP TABLE IF EXISTS summary_table;
DROP TABLE IF EXISTS detailed_table;

-- Function to calculate rental duration
CREATE OR REPLACE FUNCTION calculate_duration(rental_date TIMESTAMP, return_date TIMESTAMP)
RETURNS INTEGER AS $$
BEGIN
    RETURN EXTRACT(DAY FROM (return_date - rental_date));
END;
$$ LANGUAGE plpgsql;

--SELECT calculate_duration('2024-08-08','2024-08-18');

-- Function to calculate total rental amount
CREATE OR REPLACE FUNCTION calculate_total_rental_amount(rental_duration INTEGER, rental_rate NUMERIC)
RETURNS NUMERIC AS $$
BEGIN
    RETURN rental_duration * rental_rate;
END;
$$ LANGUAGE plpgsql;

--SELECT calculate_total_rental_amount(10,3.50);

-- Create detailed_table______________________________________________________________________________
CREATE TABLE detailed_table (
    rental_id INT,
    inventory_id INT,
    film_id INT,
    store_id INT,
    rental_rate NUMERIC,
    category_id INT,
    category_name TEXT,
    rental_duration INT,
    total_rental_amount NUMERIC
);

--SELECT * FROM detailed_table;

-- Insert data into detailed_table
 INSERT INTO detailed_table (
    rental_id,
    inventory_id,
    film_id,
    store_id,
    rental_rate,
    category_id,
    category_name,
    rental_duration,
    total_rental_amount
)
SELECT
    rental.rental_id,
    rental.inventory_id,
    inventory.film_id,
    inventory.store_id,
    film.rental_rate,
    film_category.category_id,
    category.name,
    calculate_duration(rental.rental_date, rental.return_date),
    calculate_total_rental_amount(calculate_duration(rental.rental_date, rental.return_date), film.rental_rate)
FROM rental
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN film ON inventory.film_id = film.film_id
INNER JOIN film_category ON film.film_id = film_category.film_id
INNER JOIN category ON film_category.category_id = category.category_id;

--SELECT * FROM detailed_table;

-- Create summary_table_____________________________________________________________________________________
CREATE TABLE summary_table (
    store_id INT,
    category_name TEXT,
    rental_total_revenue NUMERIC,
    PRIMARY KEY (store_id, category_name)
);

--SELECT * FROM summary_table;

-- Insert aggregated data into summary_table
INSERT INTO summary_table (store_id, category_name, rental_total_revenue)
SELECT
    store_id,
    category_name,
    SUM(total_rental_amount) AS rental_total_revenue
FROM
    detailed_table
GROUP BY
    store_id,
    category_name;

--SELECT * FROM summary_table ORDER BY category_name;

-- Trigger function to update summary_table____________________________________________________________
CREATE OR REPLACE FUNCTION update_summary_table()
RETURNS TRIGGER AS $$
BEGIN
   
    DELETE FROM summary_table
    WHERE store_id = NEW.store_id
      AND category_name = NEW.category_name;

   
    INSERT INTO summary_table (store_id, category_name, rental_total_revenue)
    SELECT
        NEW.store_id,
        NEW.category_name,
        SUM(total_rental_amount) AS rental_total_revenue
    FROM detailed_table
    WHERE store_id = NEW.store_id
      AND category_name = NEW.category_name
    GROUP BY store_id, category_name;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER trigger_update_summary
AFTER INSERT ON detailed_table
FOR EACH ROW
EXECUTE FUNCTION update_summary_table();


-- Procedure to refresh data_______________________________________________________________________________
CREATE OR REPLACE PROCEDURE refresh_data()
AS $$
BEGIN
      TRUNCATE TABLE detailed_table;
 
      INSERT INTO detailed_table (
        rental_id,
        inventory_id,
        film_id,
        store_id,
        rental_rate,
        category_id,
        category_name,
        rental_duration,
        total_rental_amount
    )
    SELECT
        rental.rental_id,
        rental.inventory_id,
        inventory.film_id,
        inventory.store_id,
        film.rental_rate,
        film_category.category_id,
        category.name AS category_name,
        calculate_duration(rental.rental_date, rental.return_date) AS rental_duration,
        calculate_total_rental_amount(
            calculate_duration(rental.rental_date, rental.return_date),
            film.rental_rate
        ) AS total_rental_amount
    FROM rental
    INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
    INNER JOIN film ON inventory.film_id = film.film_id
    INNER JOIN film_category ON film.film_id = film_category.film_id
    INNER JOIN category ON film_category.category_id = category.category_id;

    -- Note: The summary_table will be updated by triggers
END;
$$ LANGUAGE plpgsql;

--CALL refresh_data();

/*INSERT INTO detailed_table(
      rental_id,
    inventory_id,
    film_id,
    store_id,
    rental_rate,
    category_id,
    category_name,
    rental_duration,
    total_rental_amount
)VALUES(111111,1,1,1,1.00,3,'Horror',4,0.00);*/

--SELECT * FROM detailed_table WHERE rental_id = 111111;

--SELECT * FROM summary_table ORDER BY category_name;
